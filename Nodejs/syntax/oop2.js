// v1이라는 변수를 미리 누가 사용하고 있었으나 엄청나게 많은 코드
// 뒤에 새롭게 누군가 v1이라는 변수를 사용하고 싶어서 새롭게
// 그 값을 할당하게 되면 그 이후부터 v1은 'egoing'이라는 값을 가지게 된다.
// 이런 경우를 막아주는 것이 객체이다.

/*
// 문제가 생기는 코드
var v1 = 'v1';
// 100000 line code
v1 = 'egoing';
var v2 = 'v2';
*/

var o = {
    v1: 'v1',
    v2: 'v2',
    f1: function(){
        // o.v1은 잘못된 사용법
        // 만약 객체의 이름이 바뀔경우 모든 코드를 고쳐야 하며
        // 혹시나 고치지 않으면 에러가 발생한다.
        // 이를 방지하기 위해 나오는 방식 => 'this'
        // this = 자기 자신의 객체를 가르킨다. (참조 가능)
        console.log(this.v1);
    },
    f2: function(){
        console.log(this.v2);
    }
}

function f1(){
    console.log(o.v1);
}

/*
// 누군가 또 f1 함수를 선언할 경우 문제가 생긴다.
function f1(){
    // ...
}


function f2(){
    console.log(o.v2);
}


f1();
f2();
*/
// 하지만, 객체에 값으로써 선언하면 이런 문제가 사라진다.

o.f1();
o.f2();